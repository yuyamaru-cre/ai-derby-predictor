import { useState, useEffect } from 'react';
import { Trophy, Copy, Check, Sparkles, TrendingUp, Info, Upload, FileText, X, ChevronDown, ChevronUp, Search, BookOpen, Brain, Target, AlertCircle } from 'lucide-react';

export default function HorseRacingApp() {
  const [mode, setMode] = useState('predict'); // 'predict' or 'learn'
  const [pdfFile, setPdfFile] = useState(null);
  const [raceInfo, setRaceInfo] = useState('');
  const [predictionStyle, setPredictionStyle] = useState('balanced');
  const [pastData, setPastData] = useState('');
  const [prediction, setPrediction] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [searchProgress, setSearchProgress] = useState('');
  const [analysisProgress, setAnalysisProgress] = useState('');
  const [webData, setWebData] = useState('');
  const [copied, setCopied] = useState(false);
  const [showPastData, setShowPastData] = useState(false);
  const [showRawData, setShowRawData] = useState(false);
  const [extractedData, setExtractedData] = useState('');
  
  // 学習モード用
  const [learningPrediction, setLearningPrediction] = useState('');
  const [actualResult, setActualResult] = useState('');
  const [comparison, setComparison] = useState('');
  const [learningData, setLearningData] = useState(null);
  const [learningCount, setLearningCount] = useState(0);

  const styles = [
    { value: 'balanced', label: 'バランス型', description: 'データと直感を組み合わせ' },
    { value: 'data', label: 'データ重視', description: '統計と数字を中心に分析' },
    { value: 'intuitive', label: '直感重視', description: '経験と勘を活かした予想' },
    { value: 'conservative', label: '堅実派', description: '手堅い本命中心の予想' },
    { value: 'aggressive', label: '穴狙い', description: '高配当を狙った予想' },
    { value: 'professional', label: 'プロ目線', description: '専門家のような詳細分析' }
  ];

  // ストレージ操作のヘルパー関数（フォールバック付き）
  const storageGet = async (key) => {
    try {
      // まずwindow.storageを試す
      if (window.storage && typeof window.storage.get === 'function') {
        const result = await window.storage.get(key);
        return result ? result.value : null;
      }
    } catch (error) {
      console.log('window.storage使用不可、localStorageにフォールバック');
    }
    
    // フォールバック: localStorage
    try {
      return localStorage.getItem(key);
    } catch (error) {
      console.error('localStorage読み込みエラー:', error);
      return null;
    }
  };

  const storageSet = async (key, value) => {
    try {
      // まずwindow.storageを試す
      if (window.storage && typeof window.storage.set === 'function') {
        await window.storage.set(key, value);
        return true;
      }
    } catch (error) {
      console.log('window.storage使用不可、localStorageにフォールバック');
    }
    
    // フォールバック: localStorage
    try {
      localStorage.setItem(key, value);
      return true;
    } catch (error) {
      console.error('localStorage保存エラー:', error);
      return false;
    }
  };

  const storageDelete = async (key) => {
    try {
      if (window.storage && typeof window.storage.delete === 'function') {
        await window.storage.delete(key);
        return true;
      }
    } catch (error) {
      console.log('window.storage使用不可、localStorageにフォールバック');
    }
    
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error('localStorage削除エラー:', error);
      return false;
    }
  };

  const storageList = async (prefix) => {
    try {
      if (window.storage && typeof window.storage.list === 'function') {
        return await window.storage.list(prefix);
      }
    } catch (error) {
      console.log('window.storage使用不可、localStorageにフォールバック');
    }
    
    // localStorage版のlist実装
    try {
      const keys = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith(prefix)) {
          keys.push(key);
        }
      }
      return { keys };
    } catch (error) {
      console.error('localStorageリストエラー:', error);
      return { keys: [] };
    }
  };

  // 学習データ読み込み
  useEffect(() => {
    loadLearningData();
  }, []);

  const loadLearningData = async () => {
    try {
      const value = await storageGet('learning:summary');
      if (value) {
        const data = JSON.parse(value);
        setLearningData(data);
        setLearningCount(data.totalLearnings || 0);
        console.log('学習データ読み込み成功:', data.totalLearnings, '件');
      } else {
        console.log('学習データなし、新規開始');
      }
    } catch (error) {
      console.error('学習データ読み込みエラー:', error);
      alert('学習データの読み込みに失敗しました。ブラウザの設定を確認してください。');
    }
  };

  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    // PDFまたは画像ファイルをチェック
    const isPDF = file.type === 'application/pdf';
    const isImage = file.type.startsWith('image/');
    
    if (!isPDF && !isImage) {
      alert('PDFまたは画像ファイル（JPG、PNG等）を選択してください');
      return;
    }

    setPdfFile(file);
    setIsAnalyzing(true);

    try {
      const base64Data = await new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result.split(',')[1]);
        reader.onerror = () => reject(new Error('ファイル読み込み失敗'));
        reader.readAsDataURL(file);
      });

      // PDFか画像かで送信形式を変更
      const contentPayload = isPDF ? {
        type: "document",
        source: {
          type: "base64",
          media_type: "application/pdf",
          data: base64Data
        }
      } : {
        type: "image",
        source: {
          type: "base64",
          media_type: file.type,
          data: base64Data
        }
      };

      const response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 2000,
          messages: [
            {
              role: "user",
              content: [
                contentPayload,
                {
                  type: "text",
                  text: `このJRA出馬表${isPDF ? 'PDF' : '画像'}から以下の情報を抽出してください：

【抽出項目】
1. レース名
2. 開催場（競馬場名）
3. 距離（例：芝1600m）
4. 馬場状態
5. 開催日時
6. 出走馬リスト（馬番、馬名、騎手、斤量、オッズ）

${mode === 'learn' ? '\n※学習モード：レース結果は抽出しないでください' : ''}

【出力形式】
レース名：
開催場：
距離：
馬場：
開催日：

【出走馬】
1番 馬名 / 騎手名 / 斤量 / オッズ
2番 ...`
                }
              ]
            }
          ],
        })
      });

      const data = await response.json();
      const text = data.content.map(item => item.text || "").join("\n");
      setExtractedData(text.trim());
      setRaceInfo(text.trim());
    } catch (error) {
      console.error('ファイル解析エラー:', error);
      alert('ファイルの解析中にエラーが発生しました。もう一度お試しください。');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const removePdf = () => {
    setPdfFile(null);
    setExtractedData('');
    setRaceInfo('');
    setWebData('');
    setLearningPrediction('');
    setActualResult('');
    setComparison('');
  };

  const searchActualResult = async () => {
    if (!extractedData) {
      alert('レース情報が必要です');
      return;
    }

    setIsSearching(true);
    setSearchProgress('レース結果を検索中...');

    try {
      const raceNameMatch = extractedData.match(/レース名[：:]\s*(.+)/);
      const venueMatch = extractedData.match(/開催場[：:]\s*(.+)/);
      const dateMatch = extractedData.match(/開催日[：:]\s*(.+)/);

      if (!raceNameMatch) {
        alert('レース名が見つかりません');
        setIsSearching(false);
        return;
      }

      // 日付を必ず含める
      const searchQuery = `${dateMatch?.[1] || ''} ${venueMatch?.[1] || ''} ${raceNameMatch[1]} 結果`;
      
      console.log('検索クエリ:', searchQuery); // デバッグ用

      const resultResponse = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 600,
          tools: [{ type: "web_search_20250305", name: "web_search" }],
          messages: [
            { 
              role: "user", 
              content: `このレースの結果を調べてください：
${searchQuery}

※これは過去に開催されたレースです。

1-3着の馬番と馬名を以下の形式で：
1着: 馬番 馬名
2着: 馬番 馬名
3着: 馬番 馬名` 
            }
          ],
        })
      });

      const resultData = await resultResponse.json();
      const resultText = resultData.content.map(item => item.text || "").join("\n");
      
      if (resultText && resultText.length > 20) {
        setActualResult(resultText);
        setSearchProgress('✓ 結果取得完了');
      } else {
        setSearchProgress('結果が見つかりませんでした。手動入力してください。');
      }
    } catch (error) {
      console.error('結果検索エラー:', error);
      setSearchProgress('検索エラー。手動入力してください。');
    } finally {
      setIsSearching(false);
    }
  };

  const searchWebData = async () => {
    if (!extractedData) {
      alert('まずPDFをアップロードしてください');
      return;
    }

    setIsSearching(true);
    setWebData('');
    let allSearchData = '';

    try {
      const venueMatch = extractedData.match(/開催場[：:]\s*(.+)/);
      const dateMatch = extractedData.match(/開催日[：:]\s*(.+)/);
      
      if (venueMatch && dateMatch) {
        setSearchProgress('天気予報を検索中...');
        const weatherResponse = await fetch("https://api.anthropic.com/v1/messages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "claude-sonnet-4-20250514",
            max_tokens: 500,
            tools: [{ type: "web_search_20250305", name: "web_search" }],
            messages: [
              { 
                role: "user", 
                content: `${venueMatch[1]} ${dateMatch[1]} 天気

天気、気温、馬場への影響を150文字以内で。` 
              }
            ],
          })
        });

        const weatherData = await weatherResponse.json();
        const weatherText = weatherData.content.map(item => item.text || "").join("\n");
        allSearchData += `【天気予報】\n${weatherText}\n\n`;
      }

      const horseMatches = [...extractedData.matchAll(/(\d+)番\s+([^\s/]+)/g)];
      const horsesToSearch = horseMatches.slice(0, 5);
      
      for (let i = 0; i < horsesToSearch.length; i++) {
        const [, number, horseName] = horsesToSearch[i];
        setSearchProgress(`${horseName}のデータを検索中... (${i + 1}/${horsesToSearch.length})`);

        const horseResponse = await fetch("https://api.anthropic.com/v1/messages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "claude-sonnet-4-20250514",
            max_tokens: 600,
            tools: [{ type: "web_search_20250305", name: "web_search" }],
            messages: [
              { 
                role: "user", 
                content: `競走馬 ${horseName} netkeiba

脚質、得意コース、最近3走を200文字以内で。` 
              }
            ],
          })
        });

        const horseData = await horseResponse.json();
        const horseText = horseData.content.map(item => item.text || "").join("\n");
        allSearchData += `【${number}番 ${horseName}】\n${horseText}\n\n`;

        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      if (horsesToSearch.length < horseMatches.length) {
        allSearchData += `※残り${horseMatches.length - horsesToSearch.length}頭については基本情報のみで予想します\n`;
      }

      setWebData(allSearchData);
      setSearchProgress('✓ 検索完了');
    } catch (error) {
      console.error('Web検索エラー:', error);
      alert('データ検索中にエラーが発生しました。');
    } finally {
      setIsSearching(false);
    }
  };

  const generatePrediction = async (isLearningMode = false) => {
    if (!raceInfo.trim()) return;

    setIsLoading(true);
    if (isLearningMode) {
      setLearningPrediction('');
    } else {
      setPrediction('');
    }
    setAnalysisProgress('');
    let fullPrediction = '';

    try {
      const styleDesc = {
        balanced: 'データと直感をバランスよく組み合わせた',
        data: 'データと統計を重視した',
        intuitive: '経験と直感を重視した',
        conservative: '手堅く堅実な',
        aggressive: '高配当の穴を狙った',
        professional: 'プロフェッショナルな視点での'
      };

      // 学習データを活用
      let learningContext = '';
      if (!isLearningMode && learningData) {
        learningContext = `\n【過去の学習から得た知見】\n${JSON.stringify(learningData.insights || []).slice(0, 500)}\n※これらの知見を活用して予想精度を向上させてください。\n\n`;
      }

      // フェーズ1: レース全体分析
      setAnalysisProgress('フェーズ1: レース全体を分析中...');
      
      const phase1Response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 1000,
          messages: [
            { 
              role: "user", 
              content: `あなたは競馬予想のプロです。以下のレース情報を分析してください。

【レース基本情報】
${raceInfo}

${webData ? `【Web検索データ】\n${webData}\n` : ''}

${pastData ? `【追加情報】\n${pastData}\n` : ''}

${learningContext}

【タスク】
このレース全体を分析し、以下の点について述べてください：

1. コース特性（芝/ダート、距離、回り方）
2. 馬場状態とその影響
3. 天気の影響（雨の場合は特に）
4. 予想されるレース展開（ハイペース/スローペース）
5. 有利な脚質

【出力形式】
簡潔に、300文字程度で。` 
            }
          ],
        })
      });

      const phase1Data = await phase1Response.json();
      const phase1Text = phase1Data.content.map(item => item.text || "").join("\n");
      fullPrediction += `【レース分析】\n${phase1Text}\n\n`;

      // フェーズ2: 各馬の評価
      setAnalysisProgress('フェーズ2: 各馬を評価中...');
      
      const phase2Response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 1200,
          messages: [
            { 
              role: "user", 
              content: `【前フェーズの分析結果】
${phase1Text}

【レース基本情報】
${raceInfo}

${webData ? `【各馬の詳細データ】\n${webData}\n` : ''}

${learningContext}

【タスク】
上記のレース分析を踏まえて、${styleDesc[predictionStyle]}予想スタイルで各馬を評価してください。

【評価ポイント】
- レース展開との相性
- 脚質の適性
- 過去成績とコース適性
- 騎手との相性
- 調子・勢い

【出力形式】
各馬について、評価を簡潔に（1頭あたり50-100文字）。` 
            }
          ],
        })
      });

      const phase2Data = await phase2Response.json();
      const phase2Text = phase2Data.content.map(item => item.text || "").join("\n");
      fullPrediction += `【各馬評価】\n${phase2Text}\n\n`;

      // フェーズ3: 本命・対抗・単穴・連下の決定
      setAnalysisProgress('フェーズ3: 予想印を決定中...');
      
      const phase3Response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 1200,
          messages: [
            { 
              role: "user", 
              content: `【レース分析】
${phase1Text}

【各馬評価】
${phase2Text}

${learningContext}

【タスク】
上記の分析を総合して、${styleDesc[predictionStyle]}予想で以下を決定してください：

◎本命（1頭）：最も勝つ可能性が高い馬
○対抗（1頭）：本命に次ぐ有力馬
▲単穴（1頭）：3着以内の可能性がある穴馬
△連下（1-2頭）：馬券圏内に絡む可能性のある馬

【出力形式】
【本命】◎
馬番・馬名
理由：（100文字程度）

【対抗】○
馬番・馬名
理由：（100文字程度）

【単穴】▲
馬番・馬名
理由：（100文字程度）

【連下】△
馬番・馬名
理由：（50文字程度）` 
            }
          ],
        })
      });

      const phase3Data = await phase3Response.json();
      const phase3Text = phase3Data.content.map(item => item.text || "").join("\n");
      fullPrediction += phase3Text + '\n\n';

      // フェーズ4: 買い目提案と総評
      setAnalysisProgress('フェーズ4: 買い目提案を作成中...');
      
      const phase4Response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 1000,
          messages: [
            { 
              role: "user", 
              content: `【これまでの分析】
${fullPrediction}

【タスク】
上記の予想を元に、以下を提案してください：

1. 買い目提案（三連単、三連複、馬単など具体的に）
2. レース展開予想（序盤〜中盤〜終盤）
3. 総評とアドバイス

【出力形式】
【買い目提案】
・三連単：◎-○-▲,△ など
・三連複：◎○▲ BOX など

【レース展開予想】
序盤〜終盤の流れを100文字程度で

【総評とアドバイス】
注意点やポイントを150文字程度で

${isLearningMode ? '' : '※この予想はAIによる分析です。'}` 
            }
          ],
        })
      });

      const phase4Data = await phase4Response.json();
      const phase4Text = phase4Data.content.map(item => item.text || "").join("\n");
      fullPrediction += phase4Text;

      if (isLearningMode) {
        setLearningPrediction(fullPrediction);
      } else {
        setPrediction(fullPrediction);
      }
      setAnalysisProgress('✓ 分析完了');
    } catch (error) {
      console.error('予想生成エラー:', error);
      const errorMsg = '申し訳ございません。予想の生成中にエラーが発生しました。もう一度お試しください。';
      if (isLearningMode) {
        setLearningPrediction(errorMsg);
      } else {
        setPrediction(errorMsg);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const analyzeAndLearn = async () => {
    if (!learningPrediction || !actualResult.trim()) {
      alert('予想結果と実際のレース結果の両方を入力してください');
      return;
    }

    setIsLoading(true);
    setAnalysisProgress('学習データを分析中...');

    try {
      // 予想と結果の突合分析
      const analysisResponse = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 2000,
          messages: [
            { 
              role: "user", 
              content: `あなたは競馬予想の分析専門家です。以下のAI予想と実際のレース結果を比較し、学習ポイントを抽出してください。

【AI予想】
${learningPrediction}

【実際のレース結果】
${actualResult}

【タスク】
以下の項目について分析してください：

1. 的中/不的中の判定
   - 本命◎の結果
   - 対抗○の結果
   - 単穴▲の結果
   - 連下△の結果

2. 予想が外れた理由（外れた場合）
   - レース展開の読み違い
   - 馬の能力評価のミス
   - 見落とした要因
   - オッズと実力の乖離

3. 予想が当たった理由（当たった場合）
   - 正しく評価できた点
   - 的確だった分析

4. 今後の改善点
   - 注目すべき新しい要素
   - 重視すべきデータ
   - 避けるべき判断パターン

【出力形式】
【的中判定】
本命：○/× 着順：
対抗：○/× 着順：
単穴：○/× 着順：

【分析】
（詳細な分析）

【学習ポイント】
1. 
2. 
3. 

【改善アクション】
・
・` 
            }
          ],
        })
      });

      const analysisData = await analysisResponse.json();
      const analysisText = analysisData.content.map(item => item.text || "").join("\n");
      setComparison(analysisText);

      // 学習内容を保存
      setAnalysisProgress('学習内容を保存中...');
      
      const currentLearning = learningData || {
        totalLearnings: 0,
        insights: [],
        patterns: [],
        lastUpdated: null
      };

      // 新しい学習内容を追加
      const newInsight = {
        date: new Date().toISOString(),
        raceName: extractedData.match(/レース名[：:]\s*(.+)/)?.[1] || '不明',
        analysis: analysisText,
        prediction: learningPrediction.substring(0, 200),
        result: actualResult.substring(0, 200)
      };

      currentLearning.totalLearnings += 1;
      currentLearning.insights.unshift(newInsight);
      currentLearning.insights = currentLearning.insights.slice(0, 20); // 最新20件保持
      currentLearning.lastUpdated = new Date().toISOString();

      const saveSuccess = await storageSet('learning:summary', JSON.stringify(currentLearning));
      
      if (!saveSuccess) {
        alert('⚠️ 学習データの保存に失敗しました。ブラウザの設定でストレージを許可してください。');
        setIsLoading(false);
        return;
      }
      
      // 個別の学習記録も保存
      const learningId = `learning:${Date.now()}`;
      await storageSet(learningId, JSON.stringify(newInsight));

      setLearningData(currentLearning);
      setLearningCount(currentLearning.totalLearnings);
      setAnalysisProgress('✓ 学習完了！');

      console.log('📚 学習データ保存完了:', {
        累計学習回数: currentLearning.totalLearnings,
        保存先: saveSuccess ? 'localStorage' : 'window.storage',
        最新学習: newInsight.raceName
      });

      alert(`✅ 学習が完了しました！（累計: ${currentLearning.totalLearnings}回）\n次回の予想から学習内容が活用されます。`);
    } catch (error) {
      console.error('学習エラー:', error);
      alert('学習データの保存中にエラーが発生しました。');
    } finally {
      setIsLoading(false);
    }
  };

  const resetLearning = async () => {
    if (!confirm('すべての学習データを削除しますか？この操作は取り消せません。')) {
      return;
    }

    try {
      await storageDelete('learning:summary');
      
      // 個別の学習記録も削除
      const keysList = await storageList('learning:');
      for (const key of keysList.keys) {
        await storageDelete(key);
      }

      setLearningData(null);
      setLearningCount(0);
      alert('✅ 学習データをリセットしました。');
    } catch (error) {
      console.error('リセットエラー:', error);
      alert('⚠️ リセット中にエラーが発生しました。');
    }
  };

  const copyToClipboard = async () => {
    try {
      const textToCopy = mode === 'learn' ? (comparison || learningPrediction) : prediction;
      await navigator.clipboard.writeText(textToCopy);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('コピー失敗:', error);
    }
  };

  const parsePrediction = (text) => {
    if (!text) return null;
    
    const sections = {};
    const lines = text.split('\n');
    let currentSection = '';
    let currentContent = [];

    lines.forEach(line => {
      if (line.startsWith('【') && line.includes('】')) {
        if (currentSection && currentContent.length > 0) {
          sections[currentSection] = currentContent.join('\n');
        }
        currentSection = line.replace(/【|】/g, '');
        currentContent = [];
      } else if (line.trim()) {
        currentContent.push(line);
      }
    });

    if (currentSection && currentContent.length > 0) {
      sections[currentSection] = currentContent.join('\n');
    }

    return sections;
  };

  const displayText = mode === 'learn' ? (comparison || learningPrediction) : prediction;
  const predictionSections = parsePrediction(displayText);

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50">
      {/* Header */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-emerald-600/5 to-teal-600/5"></div>
        <div className="relative max-w-6xl mx-auto px-6 py-12">
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl mb-6 shadow-lg">
              <Trophy className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent mb-4">
              AI競馬予想アシスタント
            </h1>
            <p className="text-xl text-slate-600 max-w-2xl mx-auto">
              学習機能で精度が進化する競馬予想AI
            </p>
            
            {/* 学習状況表示 */}
            {learningCount > 0 && (
              <div className="mt-4 inline-flex items-center gap-2 bg-purple-100 text-purple-700 px-4 py-2 rounded-full text-sm font-medium">
                <Brain className="w-4 h-4" />
                学習回数: {learningCount}回
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Mode Toggle */}
      <div className="max-w-6xl mx-auto px-6 mb-8">
        <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-2 shadow-xl border border-white/20 inline-flex gap-2">
          <button
            onClick={() => setMode('predict')}
            className={`px-6 py-3 rounded-xl font-semibold transition-all flex items-center gap-2 ${
              mode === 'predict'
                ? 'bg-emerald-600 text-white shadow-lg'
                : 'text-slate-600 hover:bg-slate-100'
            }`}
          >
            <Target className="w-5 h-5" />
            通常予想
          </button>
          <button
            onClick={() => setMode('learn')}
            className={`px-6 py-3 rounded-xl font-semibold transition-all flex items-center gap-2 ${
              mode === 'learn'
                ? 'bg-purple-600 text-white shadow-lg'
                : 'text-slate-600 hover:bg-slate-100'
            }`}
          >
            <BookOpen className="w-5 h-5" />
            学習モード
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-6xl mx-auto px-6 pb-12">
        {mode === 'predict' ? (
          // 通常予想モード
          <div className="grid lg:grid-cols-2 gap-8">
            <div className="space-y-6">
              {/* PDF Upload */}
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                <div className="flex items-center gap-3 mb-6">
                  <div className="w-10 h-10 bg-blue-100 rounded-xl flex items-center justify-center">
                    <Upload className="w-5 h-5 text-blue-600" />
                  </div>
                  <h2 className="text-2xl font-semibold text-slate-800">STEP 1: 出馬表（PDF/画像）</h2>
                </div>

                {!pdfFile ? (
                  <div>
                    <div className="border-2 border-dashed border-slate-300 rounded-xl p-8 text-center">
                      <Upload className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                      <p className="text-slate-700 font-medium mb-4">
                        JRA出馬表PDFをアップロード
                      </p>
                      <label className="inline-block">
                        <input
                          type="file"
                          accept=".pdf,application/pdf"
                          onChange={handleFileUpload}
                          disabled={isAnalyzing}
                          className="hidden"
                        />
                        <span className="inline-block bg-emerald-600 hover:bg-emerald-700 text-white font-semibold py-3 px-6 rounded-lg cursor-pointer transition-colors active:bg-emerald-800">
                          📄 ファイルを選択
                        </span>
                      </label>
                      <p className="text-xs text-slate-500 mt-3">
                        PDF、JPG、PNG等の画像形式に対応
                      </p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-3">
                    <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4 flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <FileText className="w-8 h-8 text-emerald-600" />
                        <div>
                          <p className="font-medium text-slate-800">{pdfFile.name}</p>
                          <p className="text-sm text-slate-600">
                            {isAnalyzing ? '解析中...' : '✓ 解析完了'}
                          </p>
                        </div>
                      </div>
                      {!isAnalyzing && (
                        <button
                          onClick={removePdf}
                          className="p-2 hover:bg-emerald-100 rounded-lg transition-colors"
                        >
                          <X className="w-5 h-5 text-slate-600" />
                        </button>
                      )}
                    </div>
                  </div>
                )}

                {isAnalyzing && (
                  <div className="mt-4 flex items-center gap-3 text-emerald-600">
                    <div className="w-5 h-5 border-2 border-emerald-600/30 border-t-emerald-600 rounded-full animate-spin"></div>
                    <span className="text-sm font-medium">PDFを解析中...</span>
                  </div>
                )}
              </div>

              {/* Web Search */}
              {extractedData && (
                <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-purple-100 rounded-xl flex items-center justify-center">
                      <Search className="w-5 h-5 text-purple-600" />
                    </div>
                    <h2 className="text-2xl font-semibold text-slate-800">STEP 2: 詳細データ検索</h2>
                  </div>

                  <button
                    onClick={searchWebData}
                    disabled={isSearching}
                    className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-4 px-8 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3"
                  >
                    {isSearching ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        検索中...
                      </>
                    ) : webData ? (
                      <>
                        <Check className="w-5 h-5" />
                        再検索する
                      </>
                    ) : (
                      <>
                        <Search className="w-5 h-5" />
                        詳細データを検索
                      </>
                    )}
                  </button>

                  {searchProgress && (
                    <div className="mt-4 text-sm text-purple-600 font-medium">
                      {searchProgress}
                    </div>
                  )}
                </div>
              )}

              {/* Race Info */}
              {extractedData && (
                <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                  <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-emerald-100 rounded-xl flex items-center justify-center">
                        <TrendingUp className="w-5 h-5 text-emerald-600" />
                      </div>
                      <h2 className="text-2xl font-semibold text-slate-800">抽出結果</h2>
                    </div>
                    <button
                      onClick={() => setShowRawData(!showRawData)}
                      className="flex items-center gap-2 text-emerald-600 hover:text-emerald-700 font-medium transition-colors"
                    >
                      {showRawData ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
                      {showRawData ? '閉じる' : '編集'}
                    </button>
                  </div>

                  {showRawData ? (
                    <textarea
                      value={raceInfo}
                      onChange={(e) => setRaceInfo(e.target.value)}
                      className="w-full h-64 p-4 border border-slate-200 rounded-xl resize-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white/50 text-slate-700 text-sm font-mono"
                    />
                  ) : (
                    <div className="bg-gradient-to-br from-slate-50 to-emerald-50/30 rounded-xl p-6 border border-slate-200 max-h-64 overflow-y-auto">
                      <pre className="whitespace-pre-wrap font-sans text-slate-700 leading-relaxed text-sm">
                        {extractedData}
                      </pre>
                    </div>
                  )}
                </div>
              )}

              {/* Prediction Style */}
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                <div className="flex items-center gap-3 mb-6">
                  <div className="w-10 h-10 bg-teal-100 rounded-xl flex items-center justify-center">
                    <Sparkles className="w-5 h-5 text-teal-600" />
                  </div>
                  <h2 className="text-2xl font-semibold text-slate-800">STEP 3: 予想スタイル</h2>
                </div>
                
                <div className="grid grid-cols-2 gap-3">
                  {styles.map((style) => (
                    <button
                      key={style.value}
                      onClick={() => setPredictionStyle(style.value)}
                      className={`p-4 rounded-xl border-2 transition-all duration-200 text-left ${
                        predictionStyle === style.value
                          ? 'border-emerald-500 bg-emerald-50 shadow-md'
                          : 'border-slate-200 bg-white/50 hover:border-slate-300 hover:bg-white/70'
                      }`}
                    >
                      <div className="font-medium text-slate-800">{style.label}</div>
                      <div className="text-sm text-slate-600 mt-1">{style.description}</div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Additional Info */}
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-slate-100 rounded-xl flex items-center justify-center">
                      <Info className="w-5 h-5 text-slate-600" />
                    </div>
                    <h2 className="text-2xl font-semibold text-slate-800">追加情報 (任意)</h2>
                  </div>
                  <button
                    onClick={() => setShowPastData(!showPastData)}
                    className="text-emerald-600 hover:text-emerald-700 font-medium transition-colors"
                  >
                    {showPastData ? '非表示' : '表示'}
                  </button>
                </div>
                
                {showPastData && (
                  <>
                    <p className="text-slate-600 mb-4">
                      パドック情報、オッズ変動など
                    </p>
                    <textarea
                      value={pastData}
                      onChange={(e) => setPastData(e.target.value)}
                      placeholder="追加で考慮してほしい情報を入力..."
                      className="w-full h-32 p-4 border border-slate-200 rounded-xl resize-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white/50 text-slate-700 placeholder-slate-400"
                    />
                  </>
                )}
              </div>

              {/* Generate Button */}
              <button
                onClick={() => generatePrediction(false)}
                disabled={isLoading || !raceInfo.trim()}
                className="w-full bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-4 px-8 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3"
              >
                {isLoading ? (
                  <>
                    <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    {analysisProgress || '予想を分析中...'}
                  </>
                ) : (
                  <>
                    <Trophy className="w-5 h-5" />
                    {learningCount > 0 ? `AI予想を生成（学習済み×${learningCount}）` : 'AI予想を生成（4段階分析）'}
                  </>
                )}
              </button>
            </div>

            {/* Output Column */}
            <div className="space-y-6">
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-amber-100 rounded-xl flex items-center justify-center">
                      <Trophy className="w-5 h-5 text-amber-600" />
                    </div>
                    <h2 className="text-2xl font-semibold text-slate-800">AI予想結果</h2>
                  </div>
                  
                  {prediction && (
                    <button
                      onClick={copyToClipboard}
                      className="flex items-center gap-2 px-4 py-2 bg-slate-100 hover:bg-slate-200 rounded-lg transition-colors text-slate-700 font-medium"
                    >
                      {copied ? (
                        <>
                          <Check className="w-4 h-4 text-green-600" />
                          コピー完了
                        </>
                      ) : (
                        <>
                          <Copy className="w-4 h-4" />
                          コピー
                        </>
                      )}
                    </button>
                  )}
                </div>
                
                {predictionSections ? (
                  <div className="space-y-4 max-h-[700px] overflow-y-auto">
                    {predictionSections['レース分析'] && (
                      <div className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl p-5 border border-blue-100">
                        <h3 className="font-bold text-blue-900 mb-3 flex items-center gap-2">
                          <TrendingUp className="w-5 h-5" />
                          レース分析
                        </h3>
                        <p className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['レース分析']}</p>
                      </div>
                    )}

                    {predictionSections['各馬評価'] && (
                      <div className="bg-gradient-to-br from-slate-50 to-gray-50 rounded-xl p-5 border border-slate-200">
                        <h3 className="font-bold text-slate-800 mb-3">📊 各馬評価</h3>
                        <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['各馬評価']}</p>
                      </div>
                    )}

                    <div className="grid grid-cols-1 gap-3">
                      {predictionSections['本命'] && (
                        <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-xl p-5 border-2 border-red-200">
                          <h3 className="font-bold text-red-700 mb-2 text-lg flex items-center gap-2">
                            <span className="text-2xl">◎</span> 本命
                          </h3>
                          <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['本命']}</p>
                        </div>
                      )}

                      {predictionSections['対抗'] && (
                        <div className="bg-gradient-to-br from-orange-50 to-amber-50 rounded-xl p-5 border-2 border-orange-200">
                          <h3 className="font-bold text-orange-700 mb-2 text-lg flex items-center gap-2">
                            <span className="text-2xl">○</span> 対抗
                          </h3>
                          <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['対抗']}</p>
                        </div>
                      )}

                      {predictionSections['単穴'] && (
                        <div className="bg-gradient-to-br from-yellow-50 to-lime-50 rounded-xl p-5 border-2 border-yellow-200">
                          <h3 className="font-bold text-yellow-700 mb-2 text-lg flex items-center gap-2">
                            <span className="text-2xl">▲</span> 単穴
                          </h3>
                          <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['単穴']}</p>
                        </div>
                      )}

                      {predictionSections['連下'] && (
                        <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-5 border-2 border-green-200">
                          <h3 className="font-bold text-green-700 mb-2 text-lg flex items-center gap-2">
                            <span className="text-2xl">△</span> 連下
                          </h3>
                          <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['連下']}</p>
                        </div>
                      )}
                    </div>

                    {predictionSections['買い目提案'] && (
                      <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-5 border border-purple-200">
                        <h3 className="font-bold text-purple-900 mb-3 flex items-center gap-2">
                          🎯 買い目提案
                        </h3>
                        <div className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['買い目提案']}</div>
                      </div>
                    )}

                    {predictionSections['レース展開予想'] && (
                      <div className="bg-gradient-to-br from-slate-50 to-gray-50 rounded-xl p-5 border border-slate-200">
                        <h3 className="font-bold text-slate-800 mb-3">📊 レース展開予想</h3>
                        <p className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['レース展開予想']}</p>
                      </div>
                    )}

                    {predictionSections['総評とアドバイス'] && (
                      <div className="bg-gradient-to-br from-teal-50 to-cyan-50 rounded-xl p-5 border border-teal-200">
                        <h3 className="font-bold text-teal-900 mb-3">💭 総評とアドバイス</h3>
                        <p className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['総評とアドバイス']}</p>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-64 text-slate-400">
                    <Trophy className="w-16 h-16 mb-4 opacity-50" />
                    <p className="text-lg">予想結果がここに表示されます</p>
                    <p className="text-sm mt-2 text-center px-4">
                      {learningCount > 0 ? '学習済みAIが予想を生成します' : 'PDF → データ検索 → 予想生成'}
                    </p>
                  </div>
                )}
              </div>

              <div className="bg-gradient-to-r from-emerald-50 to-teal-50 rounded-2xl p-6 border border-emerald-100">
                <h3 className="font-semibold text-slate-800 mb-3">💡 学習機能について</h3>
                <ul className="text-sm text-slate-600 space-y-2">
                  <li>• 学習モードで過去レースを分析</li>
                  <li>• <strong>PDF・画像どちらでもOK</strong> 📄📸</li>
                  <li>• <strong>レース結果は自動検索で取得</strong> 🔍</li>
                  <li>• 予想と結果を比較して改善点を抽出</li>
                  <li>• 学習内容は自動保存され次回に活用</li>
                  <li>• 学習回数が増えるほど精度向上</li>
                </ul>
              </div>

              {/* Disclaimer */}
              <div className="bg-red-50 rounded-2xl p-6 border border-red-100">
                <h3 className="font-semibold text-red-800 mb-2">⚠️ 注意事項</h3>
                <p className="text-sm text-red-700">
                  この予想はAIによる分析です。馬券購入は自己責任で。
                </p>
              </div>
            </div>
          </div>
        ) : (
          // 学習モード
          <div className="grid lg:grid-cols-2 gap-8">
            <div className="space-y-6">
              {/* PDF Upload for Learning */}
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border-2 border-purple-200">
                <div className="flex items-center gap-3 mb-6">
                  <div className="w-10 h-10 bg-purple-100 rounded-xl flex items-center justify-center">
                    <BookOpen className="w-5 h-5 text-purple-600" />
                  </div>
                  <h2 className="text-2xl font-semibold text-slate-800">STEP 1: 過去レース（PDF/画像）</h2>
                </div>

                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4 mb-4">
                  <p className="text-sm text-purple-700">
                    <AlertCircle className="w-4 h-4 inline mr-2" />
                    終了済みのレースPDFをアップロードしてください
                  </p>
                </div>

                {!pdfFile ? (
                  <div>
                    <div className="border-2 border-dashed border-purple-300 rounded-xl p-8 text-center">
                      <Upload className="w-12 h-12 text-purple-400 mx-auto mb-4" />
                      <p className="text-slate-700 font-medium mb-4">
                        過去レースの出馬表をアップロード
                      </p>
                      <label className="inline-block">
                        <input
                          type="file"
                          accept=".pdf,application/pdf"
                          onChange={handleFileUpload}
                          disabled={isAnalyzing}
                          className="hidden"
                        />
                        <span className="inline-block bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg cursor-pointer transition-colors active:bg-purple-800">
                          📄 ファイルを選択（PDF/画像）
                        </span>
                      </label>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-3">
                    <div className="bg-purple-50 border border-purple-200 rounded-xl p-4 flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <FileText className="w-8 h-8 text-purple-600" />
                        <div>
                          <p className="font-medium text-slate-800">{pdfFile.name}</p>
                          <p className="text-sm text-slate-600">
                            {isAnalyzing ? '解析中...' : '✓ 解析完了'}
                          </p>
                        </div>
                      </div>
                      {!isAnalyzing && (
                        <button
                          onClick={removePdf}
                          className="p-2 hover:bg-purple-100 rounded-lg transition-colors"
                        >
                          <X className="w-5 h-5 text-slate-600" />
                        </button>
                      )}
                    </div>
                  </div>
                )}

                {isAnalyzing && (
                  <div className="mt-4 flex items-center gap-3 text-purple-600">
                    <div className="w-5 h-5 border-2 border-purple-600/30 border-t-purple-600 rounded-full animate-spin"></div>
                    <span className="text-sm font-medium">PDFを解析中...</span>
                  </div>
                )}
              </div>

              {/* Generate Prediction for Learning */}
              {extractedData && !learningPrediction && (
                <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-indigo-100 rounded-xl flex items-center justify-center">
                      <Brain className="w-5 h-5 text-indigo-600" />
                    </div>
                    <h2 className="text-2xl font-semibold text-slate-800">STEP 2: AI予想生成</h2>
                  </div>

                  <p className="text-slate-600 mb-4">
                    結果を伏せた状態でAIに予想させます
                  </p>

                  <button
                    onClick={() => generatePrediction(true)}
                    disabled={isLoading}
                    className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-4 px-8 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3"
                  >
                    {isLoading ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        {analysisProgress || '予想生成中...'}
                      </>
                    ) : (
                      <>
                        <Brain className="w-5 h-5" />
                        AI予想を生成
                      </>
                    )}
                  </button>
                </div>
              )}

              {/* Actual Result Search/Input */}
              {learningPrediction && !comparison && (
                <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-amber-100 rounded-xl flex items-center justify-center">
                      <Trophy className="w-5 h-5 text-amber-600" />
                    </div>
                    <h2 className="text-2xl font-semibold text-slate-800">STEP 3: 実際の結果</h2>
                  </div>

                  <p className="text-slate-600 mb-4">
                    レース結果を自動検索、または手動入力
                  </p>

                  {/* Auto Search Button */}
                  <button
                    onClick={searchActualResult}
                    disabled={isSearching}
                    className="w-full mb-4 bg-gradient-to-r from-blue-600 to-cyan-600 text-white py-4 px-8 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3"
                  >
                    {isSearching ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        結果を検索中...
                      </>
                    ) : (
                      <>
                        <Search className="w-5 h-5" />
                        レース結果を自動検索
                      </>
                    )}
                  </button>

                  {searchProgress && (
                    <div className="mb-4 text-sm text-blue-600 font-medium">
                      {searchProgress}
                    </div>
                  )}

                  {/* Manual Input */}
                  <div className="relative">
                    <div className="absolute top-0 left-0 right-0 text-center">
                      <span className="bg-white px-3 py-1 text-xs text-slate-500 rounded-full border border-slate-200">
                        または手動入力
                      </span>
                    </div>
                    <textarea
                      value={actualResult}
                      onChange={(e) => setActualResult(e.target.value)}
                      placeholder="例：&#10;1着: 5番 ○○ホース&#10;2着: 3番 △△スター&#10;3着: 1番 □□ジャンプ&#10;&#10;単勝: 5番 850円&#10;馬連: 3-5 2,340円"
                      className="w-full h-48 p-4 pt-10 border border-slate-200 rounded-xl resize-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white/50 text-slate-700 placeholder-slate-400"
                    />
                  </div>

                  <button
                    onClick={analyzeAndLearn}
                    disabled={isLoading || !actualResult.trim()}
                    className="w-full mt-4 bg-gradient-to-r from-amber-600 to-orange-600 text-white py-4 px-8 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3"
                  >
                    {isLoading ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        {analysisProgress || '分析中...'}
                      </>
                    ) : (
                      <>
                        <Brain className="w-5 h-5" />
                        分析して学習する
                      </>
                    )}
                  </button>
                </div>
              )}

              {/* Learning Data Display */}
              {learningData && (
                <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                  <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-green-100 rounded-xl flex items-center justify-center">
                        <Brain className="w-5 h-5 text-green-600" />
                      </div>
                      <h2 className="text-2xl font-semibold text-slate-800">学習データ</h2>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={async () => {
                          const value = await storageGet('learning:summary');
                          if (value) {
                            console.log('保存済み学習データ:', JSON.parse(value));
                            alert('✅ データは正常に保存されています。\n詳細はコンソールを確認してください（F12キー）');
                          } else {
                            alert('⚠️ 学習データが見つかりません');
                          }
                        }}
                        className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                      >
                        保存確認
                      </button>
                      <button
                        onClick={resetLearning}
                        className="text-red-600 hover:text-red-700 text-sm font-medium"
                      >
                        リセット
                      </button>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <p className="text-sm font-medium text-green-800 mb-2">学習状況</p>
                      <p className="text-2xl font-bold text-green-900">{learningData.totalLearnings}回</p>
                      <p className="text-xs text-green-700 mt-1">
                        最終更新: {learningData.lastUpdated ? new Date(learningData.lastUpdated).toLocaleDateString('ja-JP') : '-'}
                      </p>
                    </div>

                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-h-64 overflow-y-auto">
                      <p className="text-sm font-medium text-blue-800 mb-3">最近の学習履歴</p>
                      {learningData.insights.slice(0, 5).map((insight, idx) => (
                        <div key={idx} className="mb-3 pb-3 border-b border-blue-200 last:border-0">
                          <p className="text-xs text-blue-600 mb-1">
                            {new Date(insight.date).toLocaleDateString('ja-JP')}
                          </p>
                          <p className="text-sm text-slate-700 font-medium">{insight.raceName}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Output Column for Learning */}
            <div className="space-y-6">
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-purple-100 rounded-xl flex items-center justify-center">
                      {comparison ? <Brain className="w-5 h-5 text-purple-600" /> : <Trophy className="w-5 h-5 text-purple-600" />}
                    </div>
                    <h2 className="text-2xl font-semibold text-slate-800">
                      {comparison ? '学習結果' : learningPrediction ? 'AI予想' : '結果表示エリア'}
                    </h2>
                  </div>
                  
                  {(learningPrediction || comparison) && (
                    <button
                      onClick={copyToClipboard}
                      className="flex items-center gap-2 px-4 py-2 bg-slate-100 hover:bg-slate-200 rounded-lg transition-colors text-slate-700 font-medium"
                    >
                      {copied ? (
                        <>
                          <Check className="w-4 h-4 text-green-600" />
                          コピー完了
                        </>
                      ) : (
                        <>
                          <Copy className="w-4 h-4" />
                          コピー
                        </>
                      )}
                    </button>
                  )}
                </div>
                
                {predictionSections ? (
                  <div className="space-y-4 max-h-[700px] overflow-y-auto">
                    {comparison ? (
                      // 学習分析結果
                      <>
                        {predictionSections['的中判定'] && (
                          <div className="bg-gradient-to-br from-amber-50 to-orange-50 rounded-xl p-5 border-2 border-amber-200">
                            <h3 className="font-bold text-amber-900 mb-3">🎯 的中判定</h3>
                            <pre className="text-slate-700 leading-relaxed whitespace-pre-wrap font-sans">{predictionSections['的中判定']}</pre>
                          </div>
                        )}

                        {predictionSections['分析'] && (
                          <div className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl p-5 border border-blue-200">
                            <h3 className="font-bold text-blue-900 mb-3">📊 詳細分析</h3>
                            <p className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['分析']}</p>
                          </div>
                        )}

                        {predictionSections['学習ポイント'] && (
                          <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-5 border-2 border-purple-200">
                            <h3 className="font-bold text-purple-900 mb-3 flex items-center gap-2">
                              <Brain className="w-5 h-5" />
                              学習ポイント
                            </h3>
                            <p className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['学習ポイント']}</p>
                          </div>
                        )}

                        {predictionSections['改善アクション'] && (
                          <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-5 border border-green-200">
                            <h3 className="font-bold text-green-900 mb-3">✨ 改善アクション</h3>
                            <p className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['改善アクション']}</p>
                          </div>
                        )}
                      </>
                    ) : (
                      // 通常の予想表示
                      <>
                        {predictionSections['レース分析'] && (
                          <div className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl p-5 border border-blue-100">
                            <h3 className="font-bold text-blue-900 mb-3">レース分析</h3>
                            <p className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['レース分析']}</p>
                          </div>
                        )}

                        <div className="grid grid-cols-1 gap-3">
                          {predictionSections['本命'] && (
                            <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-xl p-5 border-2 border-red-200">
                              <h3 className="font-bold text-red-700 mb-2 text-lg">◎ 本命</h3>
                              <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['本命']}</p>
                            </div>
                          )}

                          {predictionSections['対抗'] && (
                            <div className="bg-gradient-to-br from-orange-50 to-amber-50 rounded-xl p-5 border-2 border-orange-200">
                              <h3 className="font-bold text-orange-700 mb-2 text-lg">○ 対抗</h3>
                              <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['対抗']}</p>
                            </div>
                          )}

                          {predictionSections['単穴'] && (
                            <div className="bg-gradient-to-br from-yellow-50 to-lime-50 rounded-xl p-5 border-2 border-yellow-200">
                              <h3 className="font-bold text-yellow-700 mb-2 text-lg">▲ 単穴</h3>
                              <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['単穴']}</p>
                            </div>
                          )}

                          {predictionSections['連下'] && (
                            <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-5 border-2 border-green-200">
                              <h3 className="font-bold text-green-700 mb-2 text-lg">△ 連下</h3>
                              <p className="text-slate-700 leading-relaxed whitespace-pre-wrap text-sm">{predictionSections['連下']}</p>
                            </div>
                          )}
                        </div>

                        {predictionSections['買い目提案'] && (
                          <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-5 border border-purple-200">
                            <h3 className="font-bold text-purple-900 mb-3">🎯 買い目提案</h3>
                            <div className="text-slate-700 leading-relaxed whitespace-pre-wrap">{predictionSections['買い目提案']}</div>
                          </div>
                        )}
                      </>
                    )}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-64 text-slate-400">
                    <BookOpen className="w-16 h-16 mb-4 opacity-50" />
                    <p className="text-lg">学習結果がここに表示されます</p>
                    <p className="text-sm mt-2 text-center px-4">
                      PDF → AI予想 → 結果を自動検索 → 学習
                    </p>
                  </div>
                )}
              </div>

              <div className="bg-gradient-to-r from-purple-50 to-indigo-50 rounded-2xl p-6 border border-purple-200">
                <h3 className="font-semibold text-slate-800 mb-3">📚 学習モードの使い方</h3>
                <ul className="text-sm text-slate-600 space-y-2">
                  <li>• 過去の終了済みレース（PDF/画像）をアップロード</li>
                  <li>• 結果を伏せた状態でAIに予想させる</li>
                  <li>• <strong>「レース結果を自動検索」で結果を取得</strong> ⭐️</li>
                  <li>• または手動入力も可能</li>
                  <li>• AIが予想のズレを分析して学習</li>
                  <li>• 学習内容は自動保存され次回に活用</li>
                </ul>
              </div>

              {/* Comparison Button */}
              {comparison && (
                <button
                  onClick={() => {
                    setLearningPrediction('');
                    setActualResult('');
                    setComparison('');
                    removePdf();
                  }}
                  className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 text-white py-4 px-8 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 flex items-center justify-center gap-3"
                >
                  <BookOpen className="w-5 h-5" />
                  新しいレースで学習する
                </button>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
